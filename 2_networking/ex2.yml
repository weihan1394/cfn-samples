AWSTemplateFormatVersion: 2010-09-09
Description: Creating vpc -> ec2

Parameters:
  # CIDR of VPC
  NetworkCIDR:
    Description: CIDR of the new VPC
    Type: String
    Default: 1.0.0.0/16

  # AZ Name where subnet will be created
  AvailabilityZoneName:
    Description: CIDR of the new VPC
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  # CIDR of new subnet within this VPC
  SubnetCIDR:
    Description: CIDR of the new subnet within this VPC
    Type: String
    Default: 1.0.1.0/24

Resources:
  # create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref NetworkCIDR
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: demo-vpc
        - Key: Application
          Value: !Ref "AWS::StackName"

  # create Internet Gateway
  myIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demo-igw
        - Key: Application
          Value: !Ref "AWS::StackName"

  # attaching the IGW to my VPC
  vpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myIGW

  # create a custom route table for demo vpc
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: demo-public-route-table
        - Key: Application
          Value: !Ref "AWS::StackName"

  # Add routes entries for public network through igw
  myRoutes:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref myIGW

  # NACL
  myPublicNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: demo-vpc-nacl
        - Key: Application
          Value: !Ref "AWS::StackName"

  # Allow all Incoming TCP traffic
  myNaclRulesForInboundTCP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: "100"
      Protocol: "6" # tcp
      RuleAction: allow
      Egress: "false" # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0 # any ip address
      PortRange:
        From: "0"
        To: "65535"

  # Allow ping incoming to Google traffic
  myNaclRulesForInboundTCPPingGoogle:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: "101"
      Protocol: "1" # icmp
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: "false" # this rule applies to ingress traffic to the subnet
      CidrBlock: 0.0.0.0/0 # any ip address

  # Allow all Outgoing TCP traffic
  myNaclRulesForOutboundTCP:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: "100"
      Protocol: "6" # tcp
      RuleAction: allow
      Egress: "true" # this rule applies to egress traffic from the subnet
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0" # client will be using ephemeral port, using 80 or 22 here will not work
        To: "65535"

  # Allow ping outgoing to Google traffic
  myNaclRulesForOutboundTCPPingGoogle:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref myPublicNACL
      RuleNumber: "101"
      Protocol: "1" # icmp
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: "true" # this rule applies to ingress traffic to the subnet
      CidrBlock: 8.8.8.8/0 # any ip address

  # creating a public subnet
  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Ref AvailabilityZoneName
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - "public-subnet-"
              - !Ref AvailabilityZoneName
        - Key: Application
          Value: !Ref "AWS::StackName"

  # asscoiate subnet with our route table else by default it is asscoiated with main route table
  mySubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref myPublicSubnet
      RouteTableId: !Ref myRouteTable

  # associate subnet with NACL else by default it is asscoiated with main NACLs
  mySubnetNaclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref myPublicSubnet
      NetworkAclId: !Ref myPublicNACL

  # create iam role
  Role1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: Role1

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: myDummy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - Ref: Role1

  # security group
  web1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [web1-security-group, dev]]
      GroupDescription: Allow http/https and ssh  to client host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  web1Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneName
      ImageId: ami-06b09bfacae1453cb
      InstanceType: t2.nano
      KeyName: test
      SubnetId: !Ref myPublicSubnet
      Monitoring: "true"
      DisableApiTermination: "false"
      SecurityGroupIds:
        - !Ref web1SecurityGroup
      IamInstanceProfile:
        Ref: InstanceProfile

  web1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref web1Instance

# output key resources ids and export the values for cross-stack referencing
Outputs:
  VpcID:
    Description: ID of the newly created VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID" # the name for cross referencing

  PublicSubnetID:
    Description: SubnetId of the public subnet
    Value: !Ref myPublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-SUBNET"
